"""
任务安排
时间限制： 3000MS
内存限制： 589824KB
题目描述：
    小明所在的团队在接下来n天已经有 m个任务需要执行，第 i 个任务从第li天开始执行，直到第ri天结束时完成。
    该团队希望再接受第 m+1 个任务，该任务需要连续的 k 天时间来完成，任务的开始时间由团队自行决定。
    为了保证所有任务的完成质量，团队任意一天同时执行的任务数量不能超过 a 个。
    如果接受第 m+1 个任务，则从第1天到第n天，有多少天可以作为第 m+1 个任务的开始时间，使得该任务可以在第 n 天结束前完成。

输入描述
- 输入第一行包含四个正整数n(1≤n≤105)，m(1≤m≤5*104)，k(1≤k≤105 )，a(1≤a≤5*104 )，
分别表示总天数、已接受的任务数量、执行第m+1个任务所需的天数、团队最多能同时执行的任务数量。
- 输入第二行包含m个整数，第 i 个整数表示第 i 个任务开始的时间li。(1≤li≤ri)
- 输入第三行包含m个整数，第 i 个整数表示第 i 个任务完成的时间ri。(li≤ri≤n)
- 输入保证，已接受的m个任务不会使得团队某一天同时执行的任务数量超过a个。

输出描述
- 输出包含一行，一个整数，表示有多少天可以作为第m+1个任务的开始时间。

- 样例输入
10 3 3 2
1 5 4
4 10 5

- 样例输出
4

- 样例解释
样例中，第m+1个任务可以安排在第1、6、7、8天开始，共4天符合题目条件。
"""


def count_valid_days(n, m, k, a, task_left, task_right):
    # 初始化任务计数器
    count = [0] * (n + 1)
    for i in range(m):
        for j in range(task_left[i], task_right[i] + 1):
            count[j] += 1

    # 滑动窗口计算可用天数
    valid_days = 0
    for i in range(1, n - k + 2):
        if max(count[i:i + k]) < a:
            valid_days += 1

    return valid_days


if __name__ == '__main__':
    """
    首先，我们统计出每一天需要同时执行的任务数量，然后使用一个滑动窗口，从第 1 天开始到第n-k+1天结束，遍历每一天，
    对于每一天，我们检查该天开始的连续k天内，是否有同时在执行的任务超过了a个，
    如果没有，那么这一天就可以作为第m+1个任务的开始时间，计数器加1
    最后，返回计数器的值
    """

    # 读取输入数据
    n, m, k, a = map(int, input().split())
    task_left = list(map(int, input().split()))
    task_right = list(map(int, input().split()))

    # 输出结果
    print(count_valid_days(n, m, k, a, task_left, task_right))
